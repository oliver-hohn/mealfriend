// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: protos/mealfriend.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MealfriendClient is the client API for Mealfriend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MealfriendClient interface {
	GetMealPlan(ctx context.Context, in *GetMealPlanRequest, opts ...grpc.CallOption) (*GetMealPlanResponse, error)
	Scrape(ctx context.Context, in *ScrapeRequest, opts ...grpc.CallOption) (*ScrapeResponse, error)
}

type mealfriendClient struct {
	cc grpc.ClientConnInterface
}

func NewMealfriendClient(cc grpc.ClientConnInterface) MealfriendClient {
	return &mealfriendClient{cc}
}

func (c *mealfriendClient) GetMealPlan(ctx context.Context, in *GetMealPlanRequest, opts ...grpc.CallOption) (*GetMealPlanResponse, error) {
	out := new(GetMealPlanResponse)
	err := c.cc.Invoke(ctx, "/mealfriend.Mealfriend/GetMealPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealfriendClient) Scrape(ctx context.Context, in *ScrapeRequest, opts ...grpc.CallOption) (*ScrapeResponse, error) {
	out := new(ScrapeResponse)
	err := c.cc.Invoke(ctx, "/mealfriend.Mealfriend/Scrape", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MealfriendServer is the server API for Mealfriend service.
// All implementations must embed UnimplementedMealfriendServer
// for forward compatibility
type MealfriendServer interface {
	GetMealPlan(context.Context, *GetMealPlanRequest) (*GetMealPlanResponse, error)
	Scrape(context.Context, *ScrapeRequest) (*ScrapeResponse, error)
	mustEmbedUnimplementedMealfriendServer()
}

// UnimplementedMealfriendServer must be embedded to have forward compatible implementations.
type UnimplementedMealfriendServer struct {
}

func (UnimplementedMealfriendServer) GetMealPlan(context.Context, *GetMealPlanRequest) (*GetMealPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlan not implemented")
}
func (UnimplementedMealfriendServer) Scrape(context.Context, *ScrapeRequest) (*ScrapeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scrape not implemented")
}
func (UnimplementedMealfriendServer) mustEmbedUnimplementedMealfriendServer() {}

// UnsafeMealfriendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealfriendServer will
// result in compilation errors.
type UnsafeMealfriendServer interface {
	mustEmbedUnimplementedMealfriendServer()
}

func RegisterMealfriendServer(s grpc.ServiceRegistrar, srv MealfriendServer) {
	s.RegisterService(&Mealfriend_ServiceDesc, srv)
}

func _Mealfriend_GetMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMealPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealfriendServer).GetMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mealfriend.Mealfriend/GetMealPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealfriendServer).GetMealPlan(ctx, req.(*GetMealPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mealfriend_Scrape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealfriendServer).Scrape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mealfriend.Mealfriend/Scrape",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealfriendServer).Scrape(ctx, req.(*ScrapeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mealfriend_ServiceDesc is the grpc.ServiceDesc for Mealfriend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mealfriend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mealfriend.Mealfriend",
	HandlerType: (*MealfriendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMealPlan",
			Handler:    _Mealfriend_GetMealPlan_Handler,
		},
		{
			MethodName: "Scrape",
			Handler:    _Mealfriend_Scrape_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/mealfriend.proto",
}
